

#%%
from tippy.helper import Helper
from tippy.image import ScienceImage, CalibrationImage, SDTReference
#%%

class TIPSubtraction(Helper):
    
    
    def __init__(self):
        super().__init__()
    
    
    def get_referenceframe(self, 
                           tgt_image : ScienceImage,
                           type : str = 'PS1' # PS1 or SMSS or 7DS
                           ):
        
        # Locate reference frames
        pass
    
    def subtract_7DS(self,
                     tgt_image : ScienceImage,
                     ref_image : SDTReference):
        pass
        
    
    
# %%
if __name__ == '__main__':
    import os
    from astropy.io import fits
    idx = 5
    sci_image = '/data/hhchoi1022/refdata/7DT_C361K_HIGH_1x1/T11623/calib_7DT05_T11623_20240423_020143_r_360.com.fits'
    ref_image = '/data/hhchoi1022/refdata/7DT_C361K_HIGH_1x1/T11623/calib_7DT09_T11623_20250110_032334_r_360.com.fits'
    
    from tippy.image import ScienceImage
    sci = ScienceImage(sci_image, telinfo = Helper().get_telinfo('7DT', 'C361K', 'HIGH', 1))
    ref = SDTReference(ref_image, telinfo = Helper().get_telinfo('7DT', 'C361K', 'HIGH', 1))
    sci_mask = (sci.data == 0).astype(int)
    ref_mask = (ref.data == 0).astype(int)
    sci_mask_path = sci_image.replace('.fits', '.mask')
    ref_mask_path = ref_image.replace('.fits', '.mask')
    fits.writeto(sci_mask_path, sci_mask, overwrite=True)
    fits.writeto(ref_mask_path, ref_mask, overwrite=True)
    

    Helper().run_hotpants(target_img = sci_image, 
                          reference_img = ref_image, 
                          output_img = sci_image.replace('calib', f'sub{idx}_calib'), 
                          convolved_img = sci_image.replace('calib', f'conv{idx}_calib'), 
                          target_mask = sci_mask_path,
                          reference_mask = ref_mask_path,
                          convdir = 'i')
# %%
if __name__ == '__main__':
    import numpy as np
    import matplotlib.pyplot as plt
    

    fig, axes = plt.subplots(1, 2, figsize=(10, 5))
    axes[0].imshow(sci.data, origin='lower', cmap='gray', vmin=np.mean(sci.data), vmax=np.mean(sci.data) + np.std(sci.data))
    axes[0].set_title("Science Image")

    axes[1].imshow(ref.data, origin='lower', cmap='gray', vmin=np.mean(ref.data), vmax=np.mean(ref.data) + np.std(ref.data))
    axes[1].set_title("Reference Image")

    plt.show()

# %%
